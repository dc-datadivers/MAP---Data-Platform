{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"LS_AzureSQLDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSQLDatabase'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().Host};Initial Catalog=@{linkedService().Database}"
		},
		"LS_DW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_DW'"
		},
		"LS_SQLServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQLServer'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().Host};Initial Catalog=@{linkedService().Database}"
		},
		"LS_AzureDatabricks_properties_typeProperties_domain": {
			"type": "string",
			"defaultValue": "@linkedService().workspaceURL"
		},
		"LS_AzureDatabricks_properties_typeProperties_workspaceResourceId": {
			"type": "string",
			"defaultValue": "@linkedService().workspaceResourceId"
		},
		"LS_DataLakeBronze_properties_typeProperties_serviceEndpoint": {
			"type": "string"
		},
		"LS_DataLakeSilver_properties_typeProperties_url": {
			"type": "string"
		},
		"LS_FileServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().Host}"
		},
		"LS_FileServer_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "@{linkedService().User}"
		},
		"LS_KeyVault_properties_typeProperties_baseUrl": {
			"type": "string"
		},
		"LS_LogAnalytics_properties_typeProperties_url": {
			"type": "string"
		},
		"LS_REST_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseURL}"
		},
		"LS_SQLServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().User}"
		},
		"TR_ScaleDownDW_properties_PL_ScaleDW_parameters_edition": {
			"type": "string",
			"defaultValue": "GeneralPurpose"
		},
		"TR_ScaleDownDW_properties_PL_ScaleDW_parameters_serviceObjective": {
			"type": "string",
			"defaultValue": "GP_S_Gen5_4"
		},
		"TR_ScaleUpDW_properties_PL_ScaleDW_parameters_edition": {
			"type": "string",
			"defaultValue": "GeneralPurpose"
		},
		"TR_ScaleUpDW_properties_PL_ScaleDW_parameters_serviceObjective": {
			"type": "string",
			"defaultValue": "GP_S_Gen5_8"
		},
		"integrationRuntime01_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string"
		},
		"default_properties_GP_SilverStorage_value": {
			"type": "string"
		},
		"default_properties_GP_BronzeStorage_value": {
			"type": "string"
		},
		"default_properties_GP_KeyVaultDNSName_value": {
			"type": "string"
		},
		"default_properties_GP_SubscriptionId_value": {
			"type": "string"
		},
		"default_properties_GP_ResourceGroup_value": {
			"type": "string"
		},
		"default_properties_GP_Timezone_value": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_AdHoc_DimDateTimeLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline loads the date and time dimensions in the data warehouse.",
				"activities": [
					{
						"name": "PL_GenericMaster",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_GenericMaster",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@pipeline().parameters.batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"sourceEnvironment": {
									"value": "@pipeline().parameters.sourceEnvironment",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "updateDailyDimDate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PL_StarSchemaMaster",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[IDW].[updateDailyDimDate]"
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PL_StarSchemaMaster",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_GenericMaster",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_StarSchemaMaster",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@pipeline().parameters.batchlogID",
									"type": "Expression"
								},
								"groupName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "string",
						"defaultValue": "CSV"
					},
					"sourceName": {
						"type": "string",
						"defaultValue": "DimDateTime"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string",
						"defaultValue": "Ad Hoc"
					}
				},
				"folder": {
					"name": "1_Loads/AdHoc"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:11:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_GenericMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]",
				"[concat(variables('factoryId'), '/pipelines/PL_StarSchemaMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_AdHoc_ExcelInputsLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Demonstration pipeline to load Excel data into the platform.",
				"activities": [
					{
						"name": "PL_GenericMaster",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_GenericMaster",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@pipeline().parameters.batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"sourceEnvironment": {
									"value": "@pipeline().parameters.sourceEnvironment",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "string",
						"defaultValue": "Excel"
					},
					"sourceName": {
						"type": "string",
						"defaultValue": "ExcelInputs"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string",
						"defaultValue": "Ad Hoc"
					}
				},
				"folder": {
					"name": "1_Loads/AdHoc"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:11:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_GenericMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BronzeJSONToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Moves data from Bronze data lake to Silver",
				"activities": [
					{
						"name": "getBronzeToSilver",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "CTL.getBronzeToSilver",
								"storedProcedureParameters": {
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TransferBronzeJSONToSilver",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getBronzeToSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getBronzeToSilver').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "GenerateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Copy Bronze JSON to Silver",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GenerateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2,
										"translator": {
											"value": "@json(item().TabularTranslator)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_DataLakeBronzeJSON",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@{item().srcContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().srcFolder}",
													"type": "Expression"
												},
												"BlobName": {
													"value": "@{item().srcBlobName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLakeSilver",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().destBlobName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().destContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().destFolder}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Bronze JSON to Silver",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer succeeded for ',item().destContainerName,'/',item().destBlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('Copy Bronze JSON to Silver').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Bronze JSON to Silver",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('Copy Bronze JSON to Silver').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer failed for ',item().destContainerName,'/',item().destBlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "Int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeBronzeJSON')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilver')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Moves data from Bronze data lake to Silver data lake.",
				"activities": [
					{
						"name": "getBronzeToSilver",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "CTL.getBronzeToSilver",
								"storedProcedureParameters": {
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TransferBronzeToSilver",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getBronzeToSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getBronzeToSilver').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "GenerateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Copy Bronze to Silver",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GenerateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2,
										"translator": {
											"value": "@json(item().TabularTranslator)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_DataLakeBronze",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().srcBlobName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().srcContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().srcFolder}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLakeSilver",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().destBlobName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().destContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().destFolder}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Bronze to Silver",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer succeeded for ',item().destContainerName,'/',item().destBlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('Copy Bronze to Silver').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Bronze to Silver",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('Copy Bronze to Silver').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer failed for ',item().destContainerName,'/',item().destBlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "Int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeBronze')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilver')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopySilverToProcessed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getSilverToProcessed",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[copySilverToProcessed]",
								"storedProcedureParameters": {
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CopySilverToProcessed",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getSilverToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getSilverToProcessed').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "SilverToProcessed",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_DataLakeSilverBinary",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().blobName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().containerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().folderName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLakeSilverBinary",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().destBlobName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().destContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().destFolder}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "Int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilverBinary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Daily_AdventureWorksLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_GenericDBMaster",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_GenericDBMaster",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@pipeline().parameters.batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"sourceEnvironment": {
									"value": "@pipeline().parameters.sourceEnvironment",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "string",
						"defaultValue": "SQL Server"
					},
					"sourceName": {
						"type": "string",
						"defaultValue": "AdventureWorks"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string",
						"defaultValue": "Daily"
					}
				},
				"folder": {
					"name": "1_Loads/Daily"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:11:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_GenericDBMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Daily_AzureAdventureWorksLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_GenericDBMaster",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_GenericDBMaster",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@pipeline().parameters.batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"sourceEnvironment": {
									"value": "@pipeline().parameters.sourceEnvironment",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "string",
						"defaultValue": "Azure SQL Database"
					},
					"sourceName": {
						"type": "string",
						"defaultValue": "AzureAdventureWorks"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string",
						"defaultValue": "Daily"
					}
				},
				"folder": {
					"name": "1_Loads/Daily"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:11:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_GenericDBMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Daily_CanningIoTLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sample REST endpoint pipeline.",
				"activities": [
					{
						"name": "PL_GenericMaster",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_GenericMaster",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@pipeline().parameters.batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"sourceEnvironment": {
									"value": "@pipeline().parameters.sourceEnvironment",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "string",
						"defaultValue": "REST"
					},
					"sourceName": {
						"type": "string",
						"defaultValue": "Canning IOT"
					},
					"sourceEnvironment": {
						"type": "string",
						"defaultValue": "PROD"
					},
					"runFrequency": {
						"type": "string",
						"defaultValue": "Daily"
					}
				},
				"folder": {
					"name": "1_Loads/Daily"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:11:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_GenericMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ExtractPipelineRunCosts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get TenantId from AKV",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GenerateBatchlogID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().globalParameters.GP_KeyVaultDNSName,'secrets/',pipeline().parameters.SecretName_TenantId,'?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"simple": "body"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get ClientId from AKV",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().globalParameters.GP_KeyVaultDNSName,'secrets/',pipeline().parameters.SecretName_SPClientId,'?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"simple": "body"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get Secret from AKV",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().globalParameters.GP_KeyVaultDNSName,'secrets/',pipeline().parameters.SecretName_SPSecret,'?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"simple": "body"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get AAD Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get TenantId from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get ClientId from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Secret from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',activity('Get TenantId from AKV').output.value,'/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&resource=https://api.loganalytics.io&client_id=',activity('Get ClientId from AKV').output.value,'&client_secret=',encodeUriComponent(activity('Get Secret from AKV').output.value))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Costs to Lake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Local Time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "{     \"query\": \"let SelfHostedOrchestrationCostRate = toreal(@{pipeline().parameters.SelfHostedOrchestrationCostRate});     let NilAmount = toreal(0.0000000000); let SelfHostedDataMovementCostRate = toreal(@{pipeline().parameters.SelfHostedDataMovementCostRate});     let CloudOrchestrationFeeRate = @{pipeline().parameters.CloudOrchestrationFeeRate};     let CloudDataMovementCostRate = toreal(@{pipeline().parameters.CloudDataMovementCostRate}); let SelfHostedPipelineActivityCostRate = toreal(@{pipeline().parameters.SelfHostedPipelineActivityCostRate}); let CloudPipelineActivityCostRate = toreal(@{pipeline().parameters.CloudPipelineActivityCostRate}); ADFActivityRun         | where TimeGenerated >  ago(@{pipeline().parameters.QueryWindowDays}d) and Status in ('Succeeded', 'Failed', 'Cancelled')          | extend        MeterType = tostring(parse_json(Output).billingReference.billableDuration[0].meterType),                          MeterDuration = toreal(parse_json(Output).billingReference.billableDuration[0].duration)*60,                          MeterUnit = parse_json(Output).billingReference.billableDuration[0].unit,                         rowsCopied_ = toint(parse_json(Output).rowsCopied),                         dataRead_ = toint(parse_json(Output).dataRead),                         dataWritten_ = toint(parse_json(Output).dataWritten),                         throughput_ = toint(parse_json(Output).throughput),                         FailedActivities1 = case(Status=='Failed',1,0)         | extend    IncursOrchestrationFee = true,                     IncursExecutionTimeFee = case(isnotnull(MeterType) or MeterType != '',true,false),                     DurationToNearestMinute = coalesce(MeterDuration,0.0)         | extend    CloudOrchestrationCost1 = toreal(case((MeterType == 'AzureIR' or isnull(MeterType) or MeterType == '') and IncursOrchestrationFee, CloudOrchestrationFeeRate, 0.0000000000)),                           SelfHostedOrchestrationCost1 = toreal(case(MeterType == 'SelfhostedIR' and IncursOrchestrationFee, SelfHostedOrchestrationCostRate, NilAmount)),                        SelfHostedDataMovementCost1 = toreal(case(IncursExecutionTimeFee and ActivityType == 'Copy' and MeterType == 'SelfhostedIR', SelfHostedDataMovementCostRate,NilAmount)*DurationToNearestMinute),                     CloudDataMovementCost1 = toreal(case(IncursExecutionTimeFee and ActivityType == 'Copy' and MeterType == 'AzureIR', CloudDataMovementCostRate,                                                                                 NilAmount)*DurationToNearestMinute),                     SelfHostedPipelineActivityCost1 = toreal(case(IncursExecutionTimeFee and ActivityType in ('GetMetaData', 'Lookup') and MeterType == 'SelfhostedIR', SelfHostedPipelineActivityCostRate/toreal(60.0000000000),toreal(0.0000000000))*DurationToNearestMinute),                     CloudPipelineActivityCost1 = toreal(case(IncursExecutionTimeFee and ActivityType in ('GetMetaData', 'Lookup') and MeterType == 'AzureIR', CloudPipelineActivityCostRate/toreal(60.0000000000),                                                                                 NilAmount)*DurationToNearestMinute)         | extend                     TotalCost1 = (  SelfHostedDataMovementCost1 + SelfHostedOrchestrationCost1 + CloudOrchestrationCost1)         | project                     PipelineRunId,                     ActivityRunId,                     ActivityName,                     rowsCopied_,                     dataRead_,                     dataWritten_,                     throughput_,                     CloudOrchestrationCost1,                     SelfHostedOrchestrationCost1,                     SelfHostedDataMovementCost1,                     CloudDataMovementCost1,                     SelfHostedPipelineActivityCost1,                     CloudPipelineActivityCost1,                     TotalCost1,                     FailedActivities1,                     TimeGenerated             | summarize Activities = dcount(ActivityRunId),             TotalCost = sum(TotalCost1),             CloudOrchestrationCost = sum(CloudOrchestrationCost1),                  SelfHostedOrchestrationCost =  sum(SelfHostedOrchestrationCost1),              SelfHostedDataMovementCost = sum(SelfHostedDataMovementCost1),             SelfHostedPipelineActivityCost = sum(SelfHostedPipelineActivityCost1),             CloudPipelineActivityCost = sum(CloudPipelineActivityCost1),      CloudDataMovementCost = sum(CloudDataMovementCost1),           rowsCopied = sum(rowsCopied_),             dataRead = sum(dataRead_),             dataWritten = sum(dataWritten_),             FailedActivities = sum(FailedActivities1),             MaxActivityTimeGenerated = max(TimeGenerated)     by PipelineRunUid = PipelineRunId\"     }",
									"type": "Expression"
								},
								"additionalHeaders": {
									"content-type": "application/json; charset=utf-8",
									"Authorization": {
										"value": "@concat(string(activity('Get AAD Token').output.token_type),' ',string(activity('Get AAD Token').output.access_token))",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "DS_LogAnalytics",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataLakeSilverJSON",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.ContainerName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@concat('PipelineCosts/', \nformatDateTime(variables('varWATime'), 'yyyy'),\n'/',\nformatDateTime(variables('varWATime'), 'MM'),\n'/',\nformatDateTime(variables('varWATime'), 'dd'), \n'/json')",
										"type": "Expression"
									},
									"BlobName": {
										"value": "@concat(pipeline().parameters.BlobName, '.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Load DW",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DF_ConvertPipelineCostsJSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "DW_ModifiedDateTime",
										"value": {
											"value": "@convertFromUtc(utcNow(),pipeline().globalParameters.GP_Timezone)",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": false,
									"keys": [
										"PipelineRunUid"
									],
									"interimSchemaName": "STG"
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "PipelineRunUid",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "PipelineRunUid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "Activities",
											"type": "Int64",
											"physicalType": "INT64"
										},
										"sink": {
											"name": "Activities",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "TotalCost",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "TotalCost",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "CloudOrchestrationCost",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "CloudOrchestrationCost",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "SelfHostedOrchestrationCost",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "SelfHostedOrchestrationCost",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "SelfHostedDataMovementCost",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "SelfHostedDataMovementCost",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "SelfHostedPipelineActivityCost",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "SelfHostedPipelineActivityCost",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "CloudPipelineActivityCost",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "CloudPipelineActivityCost",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "CloudDataMovementCost",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "CloudDataMovementCost",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "rowsCopied",
											"type": "Int64",
											"physicalType": "INT64"
										},
										"sink": {
											"name": "rowsCopied",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "dataRead",
											"type": "Int64",
											"physicalType": "INT64"
										},
										"sink": {
											"name": "dataRead",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "dataWritten",
											"type": "Int64",
											"physicalType": "INT64"
										},
										"sink": {
											"name": "dataWritten",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "FailedActivities",
											"type": "Int64",
											"physicalType": "INT64"
										},
										"sink": {
											"name": "FailedActivities",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "MaxActivityTimeGenerated",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "MaxActivityTimeGenerated",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "DW_ModifiedDateTime",
											"type": "Datetime"
										},
										"sink": {
											"name": "DW_ModifiedDateTime",
											"type": "Datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DataLakeSilver",
								"type": "DatasetReference",
								"parameters": {
									"BlobName": {
										"value": "@concat(pipeline().parameters.BlobName, '.parquet')",
										"type": "Expression"
									},
									"ContainerName": {
										"value": "@pipeline().parameters.ContainerName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@concat('PipelineCosts/', \nformatDateTime(variables('varWATime'), 'yyyy'),\n'/',\nformatDateTime(variables('varWATime'), 'MM'),\n'/',\nformatDateTime(variables('varWATime'), 'dd')\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_CTL_PipelineCosts",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GenerateBatchlogID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "CTL.generateBatchLogID",
								"storedProcedureParameters": {
									"PipelineName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"SourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ContainerName",
											"type": "Expression"
										}
									},
									"DataFactoryName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"PipelineRunID": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Success ExtractPipelineCosts",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": null,
									"type": "String"
								},
								"failureReason": {
									"value": null,
									"type": "String"
								},
								"status": {
									"value": "Succeeded",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure Costs to Lake",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Costs to Lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "Costs to bronze",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('Costs to Lake').output.errors[0].Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure Load DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load DW",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "Load staging DW",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('Load DW').output.errors[0].Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure Get AAD Token",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get AAD Token",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "Get AAD token",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('Get AAD Token').output.errors[0].Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure Convert JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DF_ConvertPipelineCostsJSON",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "Extract pipeline costs",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('DF_ConvertPipelineCostsJSON').output.runPageURL",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DF_ConvertPipelineCostsJSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Costs to Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_ConvertPipelineCostsJSON",
								"type": "DataFlowReference",
								"parameters": {
									"containerName": {
										"value": "'@{pipeline().parameters.ContainerName}'",
										"type": "Expression"
									},
									"folderName": {
										"value": "'@{concat('PipelineCosts/', \nformatDateTime(variables('varWATime'), 'yyyy'),\n'/',\nformatDateTime(variables('varWATime'), 'MM'),\n'/',\nformatDateTime(variables('varWATime'), 'dd'), \n'/json')}'",
										"type": "Expression"
									},
									"blobName": {
										"value": "'@{concat(pipeline().parameters.BlobName, '.json')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PipelineCostsJSON": {},
									"ParquetSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set Local Time",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get AAD Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varWATime",
							"value": {
								"value": "@convertFromUtc(utcNow(),pipeline().globalParameters.GP_Timezone)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SecretName_TenantId": {
						"type": "String",
						"defaultValue": "Tenant-Id"
					},
					"SecretName_SPClientId": {
						"type": "String",
						"defaultValue": "AppReg-LogAnalytics-AppId"
					},
					"SecretName_SPSecret": {
						"type": "String",
						"defaultValue": "AppReg-LogAnalytics-Secret"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string",
						"defaultValue": "adf"
					},
					"BlobName": {
						"type": "string",
						"defaultValue": "PipelineCosts"
					},
					"QueryWindowDays": {
						"type": "string",
						"defaultValue": "2"
					},
					"SelfHostedOrchestrationCostRate": {
						"type": "string",
						"defaultValue": "0.0010500000000000002"
					},
					"SelfHostedDataMovementCostRate": {
						"type": "string",
						"defaultValue": "0.0011666666666666668"
					},
					"CloudOrchestrationFeeRate": {
						"type": "string",
						"defaultValue": "0.0007"
					},
					"CloudDataMovementCostRate": {
						"type": "string",
						"defaultValue": "0.0029166666666666664"
					},
					"SelfHostedPipelineActivityCostRate": {
						"type": "string",
						"defaultValue": "0.0020000000"
					},
					"CloudPipelineActivityCostRate": {
						"type": "string",
						"defaultValue": "0.00500000000"
					}
				},
				"variables": {
					"rowId": {
						"type": "String",
						"defaultValue": "0"
					},
					"dataWritten": {
						"type": "String",
						"defaultValue": "1"
					},
					"tempRowId": {
						"type": "String",
						"defaultValue": "0"
					},
					"varWATime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "9_Operations"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:19:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_LogAnalytics')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilverJSON')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilver')]",
				"[concat(variables('factoryId'), '/datasets/DS_CTL_PipelineCosts')]",
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]",
				"[concat(variables('factoryId'), '/dataflows/DF_ConvertPipelineCostsJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GenerateTabluarTranslatorJSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Bronze JSON to Silver Parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_DataLakeBronzeJSON",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": "container",
									"FolderName": "Folder/2022/2022-01-18",
									"BlobName": "FileName.json"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataLakeSilver",
								"type": "DatasetReference",
								"parameters": {
									"BlobName": "FileName.parquet",
									"ContainerName": "container",
									"FolderName": "Folder/2022/2022-01-18"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "8_Utility"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:04:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeBronzeJSON')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GenericDBMaster')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Loads data from source through data lake to data warehouse.\n\nThis pipeline is only used for databases. Bronze data lake is skipped to remove redundant data.",
				"activities": [
					{
						"name": "Failure SourceToSilver",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SourceToSilverSwitch",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "SourceToSilver",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('SourceToSilverSwitch').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure SilverToDW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PL_SilverToDW",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "SilverToDW",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('PL_SilverToDW').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GenerateBatchlogID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "CTL.generateBatchLogID",
								"storedProcedureParameters": {
									"PipelineName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"SourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"DataFactoryName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"PipelineRunID": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "getSourceEnvironment",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateBatchlogID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getSourceEnvironment]",
								"storedProcedureParameters": {
									"sourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Success GenericMaster",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PL_ProcessDeltas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": null,
									"type": "String"
								},
								"failureReason": {
									"value": null,
									"type": "String"
								},
								"status": {
									"value": "Succeeded",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure ProcessDeltas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PL_ProcessDeltas",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "ProcessDeltas",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('PL_ProcessDeltas').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PL_ProcessDeltas",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_SilverToDW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessDeltas",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SourceToSilverSwitch",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "getSourceEnvironment",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.sourceType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "SQL Server",
									"activities": [
										{
											"name": "PL_SourceSQLServerToSilver",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_SourceSQLServerToSilver",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"batchlogID": {
														"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
														"type": "Expression"
													},
													"sourceType": {
														"value": "@pipeline().parameters.sourceType",
														"type": "Expression"
													},
													"sourceName": {
														"value": "@pipeline().parameters.sourceName",
														"type": "Expression"
													},
													"sourceEnvironment": {
														"value": "@pipeline().parameters.sourceEnvironment",
														"type": "Expression"
													},
													"runFrequency": {
														"value": "@pipeline().parameters.runFrequency",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "Azure SQL Database",
									"activities": [
										{
											"name": "PL_SourceAzureSQLDatabaseToSilver",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_SourceAzureSQLDatabaseToSilver",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"batchlogID": {
														"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
														"type": "Expression"
													},
													"sourceType": {
														"value": "@pipeline().parameters.sourceType",
														"type": "Expression"
													},
													"sourceName": {
														"value": "@pipeline().parameters.sourceName",
														"type": "Expression"
													},
													"sourceEnvironment": {
														"value": "@pipeline().parameters.sourceEnvironment",
														"type": "Expression"
													},
													"runFrequency": {
														"value": "@pipeline().parameters.runFrequency",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "PL_CopySilverToProcessed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SourceToSilverSwitch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_CopySilverToProcessed",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_SilverToDW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SourceToSilverSwitch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_SilverToDW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "String"
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2_Masters"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:26:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]",
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessDeltas')]",
				"[concat(variables('factoryId'), '/pipelines/PL_CopySilverToProcessed')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SilverToDW')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SourceSQLServerToSilver')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SourceAzureSQLDatabaseToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GenericMaster')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Loads data from source through data lake to data warehouse.",
				"activities": [
					{
						"name": "Failure SourceToBronze",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SourceToBronzeSwitch",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "SourceToBronze",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('SourceToBronzeSwitch').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure SilverToDW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PL_SilverToDW",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "SilverToDW",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('PL_SilverToDW').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GenerateBatchlogID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "CTL.generateBatchLogID",
								"storedProcedureParameters": {
									"PipelineName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"SourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"DataFactoryName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"PipelineRunID": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "getSourceEnvironment",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GenerateBatchlogID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getSourceEnvironment]",
								"storedProcedureParameters": {
									"sourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Success GenericMaster",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PL_ProcessDeltas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": null,
									"type": "String"
								},
								"failureReason": {
									"value": null,
									"type": "String"
								},
								"status": {
									"value": "Succeeded",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure ProcessDeltas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PL_ProcessDeltas",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "ProcessDeltas",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('PL_ProcessDeltas').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PL_ProcessDeltas",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_SilverToDW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessDeltas",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SourceToBronzeSwitch",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "getSourceEnvironment",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.sourceType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "CSV",
									"activities": [
										{
											"name": "PL_SourceCSVToBronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_SourceCSVToBronze",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"batchlogID": {
														"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
														"type": "Expression"
													},
													"sourceType": {
														"value": "@pipeline().parameters.sourceType",
														"type": "Expression"
													},
													"sourceName": {
														"value": "@pipeline().parameters.sourceName",
														"type": "Expression"
													},
													"sourceEnvironment": {
														"value": "@pipeline().parameters.sourceEnvironment",
														"type": "Expression"
													},
													"runFrequency": {
														"value": "@pipeline().parameters.runFrequency",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "Excel",
									"activities": [
										{
											"name": "PL_SourceExcelToBronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_SourceExcelToBronze",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"batchlogID": {
														"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
														"type": "Expression"
													},
													"sourceType": {
														"value": "@pipeline().parameters.sourceType",
														"type": "Expression"
													},
													"sourceName": {
														"value": "@pipeline().parameters.sourceName",
														"type": "Expression"
													},
													"sourceEnvironment": {
														"value": "@pipeline().parameters.sourceEnvironment",
														"type": "Expression"
													},
													"runFrequency": {
														"value": "@pipeline().parameters.runFrequency",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "REST",
									"activities": [
										{
											"name": "PL_SourceRESTToBronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_SourceRESTToBronze",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"batchlogID": {
														"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
														"type": "Expression"
													},
													"sourceType": {
														"value": "@pipeline().parameters.sourceType",
														"type": "Expression"
													},
													"sourceName": {
														"value": "@pipeline().parameters.sourceName",
														"type": "Expression"
													},
													"sourceEnvironment": {
														"value": "@pipeline().parameters.sourceEnvironment",
														"type": "Expression"
													},
													"runFrequency": {
														"value": "@pipeline().parameters.runFrequency",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "PL_CopySilverToProcessed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BronzeToSilverSwitch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_CopySilverToProcessed",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BronzeToSilverSwitch",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "SourceToBronzeSwitch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.sourceType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "REST",
									"activities": [
										{
											"name": "PL_BronzeJSONToSilver",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_BronzeJSONToSilver",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"batchlogID": {
														"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
														"type": "Expression"
													},
													"sourceType": {
														"value": "@pipeline().parameters.sourceType",
														"type": "Expression"
													},
													"sourceName": {
														"value": "@pipeline().parameters.sourceName",
														"type": "Expression"
													},
													"runFrequency": {
														"value": "@pipeline().parameters.runFrequency",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "PL_BronzeToSilver",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_BronzeToSilver",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"batchlogID": {
												"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
												"type": "Expression"
											},
											"sourceType": {
												"value": "@pipeline().parameters.sourceType",
												"type": "Expression"
											},
											"sourceName": {
												"value": "@pipeline().parameters.sourceName",
												"type": "Expression"
											},
											"runFrequency": {
												"value": "@pipeline().parameters.runFrequency",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Failure BronzeToSilver",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "BronzeToSilverSwitch",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "BronzeToSilver",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('BronzeToSilverSwitch').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PL_SilverToDW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BronzeToSilverSwitch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_SilverToDW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchlogID": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"sourceType": {
									"value": "@pipeline().parameters.sourceType",
									"type": "Expression"
								},
								"sourceName": {
									"value": "@pipeline().parameters.sourceName",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "String"
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2_Masters"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:16:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]",
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessDeltas')]",
				"[concat(variables('factoryId'), '/pipelines/PL_CopySilverToProcessed')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SilverToDW')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BronzeToSilver')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SourceCSVToBronze')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SourceExcelToBronze')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SourceRESTToBronze')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BronzeJSONToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ProcessDeltas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline processes delta changed records.",
				"activities": [
					{
						"name": "getDeltas",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "CTL.getDeltas",
								"storedProcedureParameters": {
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "execDeltas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getDeltas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getDeltas').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "GenerateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "UpdateWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Delta load complete for ', \nitem().destinationSchema, \n'.', \nitem().destinationTableName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "FailureDelta",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delta Proc Required",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('ProcessDeltas').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Delta load failed for ', \nitem().destinationSchema, \n'.', \nitem().destinationTableName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "UpdateLastRefreshed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delta Proc Required",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateLastRefreshed]",
										"storedProcedureParameters": {
											"sourceConfigId": {
												"value": {
													"value": "@{item().Id}",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "UpdateWatermark",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "UpdateLastRefreshed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{item().watermarkType}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Int",
												"activities": [
													{
														"name": "UpdateWatermarkInt",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "0.00:10:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[updateWatermarkInt]",
															"storedProcedureParameters": {
																"ColumnName": {
																	"value": {
																		"value": "@{item().watermarkColumn}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"sourceConfigId": {
																	"value": {
																		"value": "@{item().Id}",
																		"type": "Expression"
																	},
																	"type": "Int64"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS_DW",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "DateTime",
												"activities": [
													{
														"name": "UpdateWatermarkDateTime",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "0.00:10:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[CTL].[updateWatermarkDateTime]",
															"storedProcedureParameters": {
																"ColumnName": {
																	"value": {
																		"value": "@{item().watermarkColumn}",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"sourceConfigId": {
																	"value": {
																		"value": "@{item().Id}",
																		"type": "Expression"
																	},
																	"type": "Int64"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "LS_DW",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "FailureUpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "UpdateWatermark",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('UpdateWatermark').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Update watermark failed for ', \nitem().destinationSchema, \n'.', \nitem().destinationTableName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Delta Proc Required",
									"description": "Delta procedure is bypassed in case of Upsert processing",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GenerateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(empty(item().KeyColumns), true, false)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "ProcessDeltas",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.02:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@{item().deltaProcedure}",
														"type": "Expression"
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DW",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "Int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:25:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ProcessPBIRefreshes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getPBIRefreshes",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getPBIRefreshes]",
								"storedProcedureParameters": {
									"groupName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.groupName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RefreshPBIDatasets",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getPBIRefreshes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPBIRefreshes').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "generateLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generatePBIRefreshLogID]",
											"storedProcedureParameters": {
												"BatchLogId": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchLogId",
														"type": "Expression"
													}
												},
												"GroupName": {
													"type": "String",
													"value": {
														"value": "@{item().GroupName}",
														"type": "Expression"
													}
												},
												"PBIDatasetId": {
													"type": "String",
													"value": {
														"value": "@{item().PBIDatasetId}",
														"type": "Expression"
													}
												},
												"PBIDatasetName": {
													"type": "String",
													"value": {
														"value": "@{item().PBIDatasetName}",
														"type": "Expression"
													}
												},
												"PBIRefreshId": {
													"type": "Int64",
													"value": {
														"value": "@{item().PBIRefreshId}",
														"type": "Expression"
													}
												},
												"PBIWorkspaceId": {
													"type": "String",
													"value": {
														"value": "@{item().PBIWorkspaceId}",
														"type": "Expression"
													}
												},
												"PBIWorkspaceName": {
													"type": "String",
													"value": {
														"value": "@{item().PBIWorkspaceName}",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"Sequence": {
													"type": "Int32",
													"value": {
														"value": "@{item().Sequence}",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "PL_RefreshPBIDataset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updatePBIRefreshLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"PBIRefreshLogID": {
												"value": {
													"value": "@activity('generateLog').output.value[0].PBIRefreshLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Refresh complete for dataset ',item().PBIDatasetName)}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "PL_RefreshPBIDataset",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updatePBIRefreshLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('PL_RefreshPBIDataset').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"PBIRefreshLogID": {
												"value": {
													"value": "@activity('generateLog').output.value[0].PBIRefreshLogId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Refresh failed for ',item().PBIDatasetName)}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "PL_RefreshPBIDataset",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "generateLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_RefreshPBIDataset",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PBIWorkspaceId": {
												"value": "@{item().PBIWorkspaceId}",
												"type": "Expression"
											},
											"PBIDatasetId": {
												"value": "@{item().PBIDatasetId}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"groupName": {
						"type": "String"
					},
					"batchLogId": {
						"type": "int",
						"defaultValue": -1
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:17:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]",
				"[concat(variables('factoryId'), '/pipelines/PL_RefreshPBIDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ProcessStarSchemas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getStarSchemas",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getStarSchemaProcessing]",
								"storedProcedureParameters": {
									"groupName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.groupName",
											"type": "Expression"
										}
									},
									"procType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.procType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LoadStarSchemas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getStarSchemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetStarSchemas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "generateStarLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateStarLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchLogId",
														"type": "Expression"
													}
												},
												"ExecCommand": {
													"type": "String",
													"value": {
														"value": "@{item().ExecCommand}",
														"type": "Expression"
													}
												},
												"RunFrequency": {
													"type": "String",
													"value": {
														"value": "@{item().RunFrequency}",
														"type": "Expression"
													}
												},
												"GroupName": {
													"type": "String",
													"value": {
														"value": "@{item().GroupName}",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"ProcName": {
													"type": "String",
													"value": {
														"value": "@{item().ProcName}",
														"type": "Expression"
													}
												},
												"ProcSchema": {
													"type": "String",
													"value": {
														"value": "@{item().ProcSchema}",
														"type": "Expression"
													}
												},
												"ProcType": {
													"type": "String",
													"value": {
														"value": "@{item().ProcType}",
														"type": "Expression"
													}
												},
												"Sequence": {
													"type": "Int32",
													"value": {
														"value": "@item().Sequence",
														"type": "Expression"
													}
												},
												"StarConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"TableName": {
													"type": "String",
													"value": {
														"value": "@{item().TableName}",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Proc",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateStarLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"StarLogID": {
												"value": {
													"value": "@activity('generateStarLog').output.value[0].StarLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Processing complete for ',item().TableName)}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Proc",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateStarLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('Execute Proc').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"StarLogID": {
												"value": {
													"value": "@activity('generateStarLog').output.value[0].StarLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Processing failed for ',item().TableName)}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Execute Proc",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "generateStarLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@{item().ExecCommand}",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"groupName": {
						"type": "String"
					},
					"procType": {
						"type": "String"
					},
					"batchLogId": {
						"type": "int",
						"defaultValue": -1
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_RefreshPBIDataset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call Dataset Refresh",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.PBIWorkspaceId,'/datasets/',pipeline().parameters.PBIDatasetId,'/refreshes')",
								"type": "Expression"
							},
							"method": "POST",
							"body": {
								"notifyOption": "NoNotification"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "Until Refresh Complete",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Call Dataset Refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals('Unknown',variables('RefreshStatus')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Dataset Refresh Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.PBIWorkspaceId,'/datasets/',pipeline().parameters.PBIDatasetId,'/refreshes?$top=1')",
											"type": "Expression"
										},
										"method": "GET",
										"body": "",
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "Set RefreshStatus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Dataset Refresh Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "RefreshStatus",
										"value": {
											"value": "@activity('Get Dataset Refresh Status').output.value[0].status",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Refresh Succeeded",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Until Refresh Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('RefreshStatus'),'Completed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail Pipeline",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://ThrowAnError ",
										"method": "POST",
										"body": "Fail"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"PBIWorkspaceId": {
						"type": "string"
					},
					"PBIDatasetId": {
						"type": "string"
					}
				},
				"variables": {
					"RefreshStatus": {
						"type": "String",
						"defaultValue": "Unknown"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-11T00:36:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ScaleDW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Scale DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CTL].[scaleDB]",
							"storedProcedureParameters": {
								"edition": {
									"value": {
										"value": "@pipeline().parameters.edition",
										"type": "Expression"
									},
									"type": "String"
								},
								"serviceObjective": {
									"value": {
										"value": "@pipeline().parameters.serviceObjective",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"edition": {
						"type": "string",
						"defaultValue": "Hyperscale"
					},
					"serviceObjective": {
						"type": "string",
						"defaultValue": "HS_Gen5_2"
					}
				},
				"folder": {
					"name": "9_Operations"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:04:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SilverToDW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getSilverToDW",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getSilverToDW]",
								"storedProcedureParameters": {
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TransferSilverToDW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getSilverToDW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getSilverToDW').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "GenerateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "LoadDW",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GenerateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "@{if(empty(item().KeyColumns), \nconcat('TRUNCATE TABLE ',item().destinationSchema,'.',item().destinationTableName), \n'')\n}",
												"type": "Expression"
											},
											"writeBehavior": {
												"value": "@if(empty(item().KeyColumns), 'Insert', 'Upsert')",
												"type": "Expression"
											},
											"sqlWriterUseTableLock": false,
											"upsertSettings": {
												"useTempDB": {
													"value": "@if(empty(item().KeyColumns), true, false)",
													"type": "Expression"
												},
												"keys": {
													"value": "@if(empty(item().KeyColumns), '', json(item().KeyColumns))",
													"type": "Expression"
												}
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_DataLakeSilver",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().blobName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().containerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().folderName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DW",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "UpdateLastRefreshed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer succeeded for ',item().destinationSchema,'.',item().destinationTableName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('LoadDW').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LoadDW",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('LoadDW').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer failed for the item ',item().destinationSchema,'.',item().destinationTableName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "UpdateLastRefreshed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "LoadDW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateLastRefreshed]",
										"storedProcedureParameters": {
											"sourceConfigId": {
												"value": {
													"value": "@{item().Id}",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "Int",
						"defaultValue": -1
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilver')]",
				"[concat(variables('factoryId'), '/datasets/DS_DW')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SourceAzureSQLDatabaseToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getSourcesToSilver",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getSourceDBToSilver]",
								"storedProcedureParameters": {
									"sourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TransferAzureSQLToSilver",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getSourcesToSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSourcesToSilver').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "generateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyAzureSQLServer_silver",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "generateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "@{item().ContainerName}/@{item().FolderName}/@{item().BLOBName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "DW_ModifiedDateTime",
													"value": {
														"value": "@convertFromUtc(utcNow(),pipeline().globalParameters.GP_Timezone)",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@{item().FetchQuery}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2,
										"translator": {
											"value": "@json(item().TabularTranslator)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_AzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"SourceHost": {
													"value": "@{item().SourceHost}",
													"type": "Expression"
												},
												"SourceDatabase": {
													"value": "@{item().SourceDatabase}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLakeSilver",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().BLOBName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().ContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().FolderName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyAzureSQLServer_silver",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer succeeded for ',item().ContainerName,'/',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('CopyAzureSQLServer_silver').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyAzureSQLServer_silver",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('CopyAzureSQLServer_silver').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer failed for ',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "String",
						"defaultValue": "-1"
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_AzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilver')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SourceCSVToBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getSourcesToBronze",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getSourceToBronze]",
								"storedProcedureParameters": {
									"sourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TransferCSVToBronze",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getSourcesToBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSourcesToBronze').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "generateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyCSV_bronze",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "generateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "@{item().ContainerName}/@{item().FolderName}/@{item().BLOBName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "DW_ModifiedDateTime",
													"value": {
														"value": "@convertFromUtc(utcNow(),pipeline().globalParameters.GP_Timezone)",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_CSV",
											"type": "DatasetReference",
											"parameters": {
												"Host": {
													"value": "@{item().SourceHost}",
													"type": "Expression"
												},
												"User": {
													"value": "@{item().SourceUser}",
													"type": "Expression"
												},
												"Password": {
													"value": "@{item().SourcePassword}",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{item().SourceLocation}",
													"type": "Expression"
												},
												"FilePath": {
													"value": "@{item().SourceFilePath}",
													"type": "Expression"
												},
												"Delimiter": {
													"value": "@{item().Delimiter}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLakeBronze",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().BLOBName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().ContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().FolderName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyCSV_bronze",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer succeeded for ',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('CopyCSV_bronze').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"durationInQueue": {
												"value": {
													"value": "@activity('CopyCSV_bronze').output?.durationInQueue?.integrationRuntimeQueue",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyCSV_bronze",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('CopyCSV_Bronze').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer failed for ',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": {
													"value": "@activity('CopyCSV_bronze').output?.durationInQueue?.integrationRuntimeQueue",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "String",
						"defaultValue": "-1"
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeBronze')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SourceExcelToBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getSourcesToBronze",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getSourceToBronze]",
								"storedProcedureParameters": {
									"sourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TransferExcelToBronze",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getSourcesToBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSourcesToBronze').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "generateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyExcel_bronze",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "generateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "@{item().ContainerName}/@{item().FolderName}/@{item().BLOBName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "DW_ModifiedDateTime",
													"value": {
														"value": "@convertFromUtc(utcNow(),pipeline().globalParameters.GP_Timezone)",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_Excel",
											"type": "DatasetReference",
											"parameters": {
												"Host": {
													"value": "@{item().SourceHost}",
													"type": "Expression"
												},
												"User": {
													"value": "@{item().SourceUser}",
													"type": "Expression"
												},
												"Password": {
													"value": "@{item().SourcePassword}",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{item().SourceLocation}",
													"type": "Expression"
												},
												"FilePath": {
													"value": "@{item().SourceFilePath}",
													"type": "Expression"
												},
												"SheetName": {
													"value": "@{item().SheetName}",
													"type": "Expression"
												},
												"Range": {
													"value": "@{item().SheetRange}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLakeBronze",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().BLOBName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().ContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().FolderName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyExcel_bronze",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer succeeded for ',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('CopyExcel_bronze').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"durationInQueue": {
												"value": {
													"value": "@activity('CopyExcel_bronze').output?.durationInQueue?.integrationRuntimeQueue",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyExcel_bronze",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('CopyExcel_Bronze').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer failed for ',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": {
													"value": "@activity('CopyExcel_bronze').output?.durationInQueue?.integrationRuntimeQueue",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "String",
						"defaultValue": "-1"
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_Excel')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeBronze')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SourceRESTToBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getSourcesToBronze",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getSourceToBronze]",
								"storedProcedureParameters": {
									"sourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TransferRESTToBronze",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getSourcesToBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSourcesToBronze').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "generateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyREST_bronze",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "generateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "@{item().ContainerName}/@{item().FolderName}/@{item().BLOBName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "DW_ModifiedDateTime",
													"value": {
														"value": "@convertFromUtc(utcNow(),pipeline().globalParameters.GP_Timezone)",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_REST",
											"type": "DatasetReference",
											"parameters": {
												"relativeURL": {
													"value": "@{item().FetchQuery}",
													"type": "Expression"
												},
												"baseURL": {
													"value": "@{item().SourceHost}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLakeBronzeJSON",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@{item().ContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().FolderName}",
													"type": "Expression"
												},
												"BlobName": {
													"value": "@{item().BlobName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyREST_bronze",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer succeeded for ',item().ContainerName,'/',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('CopyREST_bronze').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyREST_bronze",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('CopyREST_bronze').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer failed for ',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": null,
												"type": "Int64"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "String",
						"defaultValue": "-1"
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_REST')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeBronzeJSON')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SourceSQLServerToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getSourcesToSilver",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[CTL].[getSourceDBToSilver]",
								"storedProcedureParameters": {
									"sourceEnvironment": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceEnvironment",
											"type": "Expression"
										}
									},
									"sourceName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceName",
											"type": "Expression"
										}
									},
									"sourceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sourceType",
											"type": "Expression"
										}
									},
									"runFrequency": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.runFrequency",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TransferSQLToSilver",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getSourcesToSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSourcesToSilver').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "generateSourceLog",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderStoredProcedureName": "[[CTL].[generateSourceLogID]",
											"storedProcedureParameters": {
												"BatchLogID": {
													"type": "Int64",
													"value": {
														"value": "@pipeline().parameters.batchlogID",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"PipelineRunID": {
													"type": "String",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												"SourceConfigId": {
													"type": "Int64",
													"value": {
														"value": "@item().Id",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_CTL",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopySQLServer_silver",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "generateSourceLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 90,
										"secureOutput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "@{item().ContainerName}/@{item().FolderName}/@{item().BLOBName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "DW_ModifiedDateTime",
													"value": {
														"value": "@convertFromUtc(utcNow(),pipeline().globalParameters.GP_Timezone)",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@{item().FetchQuery}",
												"type": "Expression"
											},
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"dataIntegrationUnits": 2,
										"translator": {
											"value": "@json(item().TabularTranslator)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQLServer",
											"type": "DatasetReference",
											"parameters": {
												"SourceHost": {
													"value": "@{item().SourceHost}",
													"type": "Expression"
												},
												"SourceDatabase": {
													"value": "@{item().SourceDatabase}",
													"type": "Expression"
												},
												"SourceUser": {
													"value": "@{item().SourceUser}",
													"type": "Expression"
												},
												"SourcePassword": {
													"value": "@{item().SourcePassword}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLakeSilver",
											"type": "DatasetReference",
											"parameters": {
												"BlobName": {
													"value": "@{item().BLOBName}",
													"type": "Expression"
												},
												"ContainerName": {
													"value": "@{item().ContainerName}",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@{item().FolderName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopySQLServer_silver",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": null,
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Completed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer succeeded for ',item().ContainerName,'/',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('CopySQLServer_silver').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"durationInQueue": {
												"value": {
													"value": "@activity('CopySQLServer_silver').output?.durationInQueue?.integrationRuntimeQueue",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopySQLServer_silver",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[CTL].[updateSourceLog]",
										"storedProcedureParameters": {
											"FailureReason": {
												"value": {
													"value": "@activity('CopySQLServer_silver').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceLogID": {
												"value": {
													"value": "@activity('generateSourceLog').output.value[0].SourceLogID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"StatusDescription": {
												"value": {
													"value": "@{concat('Transfer failed for ',item().BlobName)}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"notebookURL": {
												"value": null,
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "Int64"
											},
											"durationInQueue": {
												"value": {
													"value": "@activity('CopySQLServer_silver').output?.durationInQueue?.integrationRuntimeQueue",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "String",
						"defaultValue": "-1"
					},
					"sourceType": {
						"type": "String"
					},
					"sourceName": {
						"type": "String"
					},
					"sourceEnvironment": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "3_Processing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:06:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQLServer')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeSilver')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_StarSchemaMaster')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dimension Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateBatchlogID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessStarSchemas",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"groupName": {
									"value": "@pipeline().parameters.groupName",
									"type": "Expression"
								},
								"procType": "Dimension",
								"batchLogId": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Fact Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Dimension Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessStarSchemas",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"groupName": {
									"value": "@pipeline().parameters.groupName",
									"type": "Expression"
								},
								"procType": "Fact",
								"batchLogId": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Failure Dimension Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Dimension Load",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "DimensionLoad",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('Dimension Load').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failure Fact Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Fact Load",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "FactLoad",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('Fact Load').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GenerateBatchlogID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "CTL.generateBatchLogID",
								"storedProcedureParameters": {
									"PipelineName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"SourceEnvironment": {
										"type": "String",
										"value": "DAP"
									},
									"SourceName": {
										"type": "String",
										"value": "StarSchema"
									},
									"DataFactoryName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"PipelineRunID": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_CTL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Bridge Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Fact Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessStarSchemas",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"groupName": {
									"value": "@pipeline().parameters.groupName",
									"type": "Expression"
								},
								"procType": "Bridge",
								"batchLogId": {
									"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
									"type": "Expression"
								},
								"runFrequency": {
									"value": "@pipeline().parameters.runFrequency",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Failure Bridge Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Bridge Load",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": "BridgeLoad",
									"type": "String"
								},
								"failureReason": {
									"value": {
										"value": "@activity('Bridge Load').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Success Bridge Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Bridge Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "CTL.UpdateBatchLog",
							"storedProcedureParameters": {
								"batchLogID": {
									"value": {
										"value": "@activity('GenerateBatchlogID').output.value[0].batchlogID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"failureLayer": {
									"value": null,
									"type": "String"
								},
								"failureReason": {
									"value": null,
									"type": "String"
								},
								"status": {
									"value": "Succeeded",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DW",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"batchlogID": {
						"type": "int"
					},
					"groupName": {
						"type": "string"
					},
					"runFrequency": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2_Masters"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-31T05:08:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessStarSchemas')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]",
				"[concat(variables('factoryId'), '/datasets/DS_CTL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AzureSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Host": {
							"value": "@dataset().SourceHost",
							"type": "Expression"
						},
						"Database": {
							"value": "@dataset().SourceDatabase",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SourceHost": {
						"type": "string"
					},
					"SourceDatabase": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FileServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"Host": {
							"value": "@dataset().Host",
							"type": "Expression"
						},
						"User": {
							"value": "@dataset().User",
							"type": "Expression"
						},
						"Password": {
							"value": "@dataset().Password",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Host": {
						"type": "string"
					},
					"User": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FilePath": {
						"type": "string"
					},
					"Delimiter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FilePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CTL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DW"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CTL_PipelineCosts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DW"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PipelineRunUid",
						"type": "varchar"
					},
					{
						"name": "Activities",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "TotalCost",
						"type": "real",
						"precision": 7
					},
					{
						"name": "CloudOrchestrationCost",
						"type": "real",
						"precision": 7
					},
					{
						"name": "SelfHostedOrchestrationCost",
						"type": "real",
						"precision": 7
					},
					{
						"name": "SelfHostedDataMovementCost",
						"type": "real",
						"precision": 7
					},
					{
						"name": "SelfHostedPipelineActivityCost",
						"type": "real",
						"precision": 7
					},
					{
						"name": "CloudPipelineActivityCost",
						"type": "real",
						"precision": 7
					},
					{
						"name": "CloudDataMovementCost",
						"type": "real",
						"precision": 7
					},
					{
						"name": "rowsCopied",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "dataRead",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "dataWritten",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FailedActivities",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "MaxActivityTimeGenerated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DW_ModifiedDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "CTL",
					"table": "PipelineCosts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DW"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@{concat(item().destinationSchema,'.',item().destinationTableName)}",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeBronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DataLakeBronze",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobName": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"rowDelimiter": "\n",
					"compressionCodec": "gzip",
					"compressionLevel": "Optimal",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DataLakeBronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeBronzeBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DataLakeBronze",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobName": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DataLakeBronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeBronzeJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DataLakeBronze",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DataLakeBronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeSilver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DataLakeSilver",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobName": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DataLakeSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeSilverBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DataLakeSilver",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobName": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DataLakeSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeSilverJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_DataLakeSilver",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					},
					"BlobName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().BlobName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DataLakeSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FileServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"Host": {
							"value": "@dataset().Host",
							"type": "Expression"
						},
						"User": {
							"value": "@dataset().User",
							"type": "Expression"
						},
						"Password": {
							"value": "@dataset().Password",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Host": {
						"type": "string"
					},
					"User": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FilePath": {
						"type": "string"
					},
					"SheetName": {
						"type": "string"
					},
					"Range": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().SheetName",
						"type": "Expression"
					},
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FilePath",
							"type": "Expression"
						}
					},
					"range": {
						"value": "@dataset().Range",
						"type": "Expression"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_LogAnalytics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_LogAnalytics",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sources"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "query"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_LogAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_REST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_REST",
					"type": "LinkedServiceReference",
					"parameters": {
						"baseURL": {
							"value": "@dataset().baseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					},
					"baseURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_REST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLServer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"Host": {
							"value": "@dataset().SourceHost",
							"type": "Expression"
						},
						"Database": {
							"value": "@dataset().SourceDatabase",
							"type": "Expression"
						},
						"User": {
							"value": "@dataset().SourceUser",
							"type": "Expression"
						},
						"Password": {
							"value": "@dataset().SourcePassword",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SourceHost": {
						"type": "string"
					},
					"SourceDatabase": {
						"type": "string"
					},
					"SourceUser": {
						"type": "string"
					},
					"SourcePassword": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"workspaceURL": {
						"type": "string"
					},
					"workspaceResourceId": {
						"type": "string"
					},
					"clusterId": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "[parameters('LS_AzureDatabricks_properties_typeProperties_domain')]",
					"authentication": "MSI",
					"workspaceResourceId": "[parameters('LS_AzureDatabricks_properties_typeProperties_workspaceResourceId')]",
					"existingClusterId": "@linkedService().clusterId"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Host": {
						"type": "string"
					},
					"Database": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSQLDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_DW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_DW_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_DataLakeBronze')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_DataLakeBronze_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_DataLakeSilver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_DataLakeSilver_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FileServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Host": {
						"type": "string"
					},
					"User": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_FileServer_properties_typeProperties_host')]",
					"userId": "[parameters('LS_FileServer_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().Password",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_KeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_LogAnalytics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_LogAnalytics_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_REST')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"baseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQLServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "On prem SQL Server",
				"parameters": {
					"Host": {
						"type": "string"
					},
					"Database": {
						"type": "string"
					},
					"User": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQLServer_connectionString')]",
					"userName": "[parameters('LS_SQLServer_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().Password",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime01')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TR_ScaleDownDW')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_ScaleDW",
							"type": "PipelineReference"
						},
						"parameters": {
							"edition": "[parameters('TR_ScaleDownDW_properties_PL_ScaleDW_parameters_edition')]",
							"serviceObjective": "[parameters('TR_ScaleDownDW_properties_PL_ScaleDW_parameters_serviceObjective')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-01-31T04:15:00",
						"timeZone": "W. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ScaleDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TR_ScaleUpDW')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_ScaleDW",
							"type": "PipelineReference"
						},
						"parameters": {
							"edition": "[parameters('TR_ScaleUpDW_properties_PL_ScaleDW_parameters_edition')]",
							"serviceObjective": "[parameters('TR_ScaleUpDW_properties_PL_ScaleDW_parameters_serviceObjective')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-01-31T04:16:00",
						"timeZone": "W. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ScaleDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('integrationRuntime01_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ConvertPipelineCostsJSON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_DataLakeSilver",
								"type": "LinkedServiceReference"
							},
							"name": "PipelineCostsJSON"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_DataLakeSilver",
								"type": "LinkedServiceReference"
							},
							"name": "ParquetSink"
						}
					],
					"transformations": [
						{
							"name": "flattenRows"
						},
						{
							"name": "extractColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     containerName as string,",
						"     folderName as string,",
						"     blobName as string",
						"}",
						"source(output(",
						"          tables as (columns as (name as string, type as string)[], name as string, rows as string[][])[]",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: ($containerName),",
						"     folderPath: ($folderName),",
						"     fileName: ($blobName),",
						"     documentForm: 'documentPerLine') ~> PipelineCostsJSON",
						"PipelineCostsJSON foldDown(unroll(tables.rows, tables.rows),",
						"     mapColumn(",
						"          rows = tables.rows",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenRows",
						"flattenRows derive(PipelineRunUid = at(rows,1),",
						"          Activities = toInteger(at(rows,2)),",
						"          TotalCost = toDecimal(at(rows,3),25,19),",
						"          CloudOrchestrationCost = toDecimal(at(rows,4),25,19),",
						"          SelfHostedOrchestrationCost = toDecimal(at(rows,5),25,19),",
						"          SelfHostedDataMovementCost = toDecimal(at(rows,6),25,19),",
						"          SelfHostedPipelineActivityCost = toDecimal(at(rows,7),25,19),",
						"          CloudPipelineActivityCost = toDecimal(at(rows,8),25,19),",
						"          CloudDataMovementCost = toDecimal(at(rows,9),25,19),",
						"          rowsCopied = toInteger(at(rows,10)),",
						"          dataRead = toInteger(at(rows,11)),",
						"          dataWritten = toInteger(at(rows,12)),",
						"          FailedActivities = toInteger(at(rows,13)),",
						"          MaxActivityTimeGenerated = toTimestamp(at(rows,14), \"yyyy-MM-dd'T'HH:mm:ss.SSS\")) ~> extractColumns",
						"extractColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($containerName),",
						"     folderPath: (replace($folderName, '/json', '')),",
						"     compressionCodec: 'snappy',",
						"     partitionFileNames:['PipelineCosts.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          PipelineRunUid,",
						"          Activities,",
						"          TotalCost,",
						"          CloudOrchestrationCost,",
						"          SelfHostedOrchestrationCost,",
						"          SelfHostedDataMovementCost,",
						"          SelfHostedPipelineActivityCost,",
						"          CloudPipelineActivityCost,",
						"          CloudDataMovementCost,",
						"          rowsCopied,",
						"          dataRead,",
						"          dataWritten,",
						"          FailedActivities,",
						"          MaxActivityTimeGenerated",
						"     ),",
						"     partitionBy('hash', 1)) ~> ParquetSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DataLakeSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/globalparameters",
			"apiVersion": "2018-06-01",
			"properties": {
				"GP_SilverStorage": {
					"type": "string",
					"value": "[parameters('default_properties_GP_SilverStorage_value')]"
				},
				"GP_BronzeStorage": {
					"type": "string",
					"value": "[parameters('default_properties_GP_BronzeStorage_value')]"
				},
				"GP_KeyVaultDNSName": {
					"type": "string",
					"value": "[parameters('default_properties_GP_KeyVaultDNSName_value')]"
				},
				"GP_SubscriptionId": {
					"type": "string",
					"value": "[parameters('default_properties_GP_SubscriptionId_value')]"
				},
				"GP_ResourceGroup": {
					"type": "string",
					"value": "[parameters('default_properties_GP_ResourceGroup_value')]"
				},
				"GP_Timezone": {
					"type": "string",
					"value": "[parameters('default_properties_GP_Timezone_value')]"
				}
			},
			"dependsOn": []
		}
	]
}